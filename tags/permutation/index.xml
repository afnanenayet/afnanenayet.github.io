<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>permutation on Afnan Enayet</title><link>https://afnan.io/tags/permutation/</link><description>Recent content in permutation on Afnan Enayet</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 05 Apr 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://afnan.io/tags/permutation/index.xml" rel="self" type="application/rss+xml"/><item><title>A Memory and Space Constant Shuffling Algorithm</title><link>https://afnan.io/posts/2019-04-05-explaining-the-hashed-permutation/</link><pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate><guid>https://afnan.io/posts/2019-04-05-explaining-the-hashed-permutation/</guid><description>Andrew Kensler, a researcher at Pixar, introduced an interesting technique for generating the permutation of an array in his 2013 paper, Correlated Multi-Jittered Sampling.
Firstly, let&#39;s look at the naive way of generating a permutation. You construct an array of elements from \(0 \cdots n\), and then you randomly shuffle them. Then, your resulting array (let&#39;s call it A), will have the permuted value for i at A[i].
from random import shuffle n = 10 permutation = list(range(n)) permutation = shuffle(permutation) The bright side of this is that it&#39;s really easy to implement and fairly easy to access.</description></item></channel></rss>